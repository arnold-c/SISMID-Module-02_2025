{
  "hash": "55bfc603c4d505ccf282c9d09ba5a3ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\nsubtitle: \"Estimation\"\nabstract-title: \"\"\nabstract: |\n    *Materials adapted from John Drake and Pej Rohani [@drakeEstimation2019]*\nexecute:\n    warning: false\nmetadata-files:\n    - metadata/matthewferrari.yml\n    - metadata/mathjax-packages.yml\neditor:\n  markdown:\n    wrap: sentence\n---\n\n# R Session 03\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(rio)\nlibrary(deSolve)\nlibrary(tidyverse)\nlibrary(ggtext)\nlibrary(gt)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_minimal())\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loads the datasets: flu, measles, niamey, plauge\nflu <- rio::import(\n  \"https://raw.githubusercontent.com/arnold-c/SISMID-Module-02_2025/main/data/flu.csv\"\n)\nniamey <- rio::import(\n  \"https://raw.githubusercontent.com/arnold-c/SISMID-Module-02_2025/main/data/niamey.csv\"\n)\n# flu <- rio::import(here::here(\"data\", \"flu.csv\"))\n# niamey <- rio::import(here::here(\"data\", \"niamey.csv\"))\n```\n:::\n\n\n## Estimating $R_0$ Problem Background\n\nSo far in this class we have focused on the **theory** of infectious disease.\nOften, however, we will want to apply this theory to particular situations.\nOne of the key applied problems in epidemic modeling is the estimation of $R_0$ from outbreak data.\nIn this session, we study two methods for estimating $R_0$ from an epidemic curve.\nAs a running example, we will use the data on influenza in a British boarding school.\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\nggplot(flu, aes(x = day, y = flu)) +\n  geom_line(color = \"slategray4\") +\n  geom_point(shape = 21, size = 5, fill = \"slategray4\", alpha = 0.8) +\n  labs(x = \"Day\", y = \"Active Influenza Cases\")\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n\n## Estimating $R_0$ From The Final Outbreak Size\n\nOur first approach is to estimate $R_0$ from the final outbreak size.\nAlthough unhelpful at the early stages of an epidemic (before the final epidemic size is observed), this method is nonetheless a useful tool for *post hoc* analysis.\nThe method is general and can be motivated by the argument listed in [@keelingIntroductionSimpleEpidemic2008]:\n\nFirst, we assume that the epidemic is started by a single infectious individual in a completely susceptible population.\nOn average, this individual infects $R_0$ others.\nThe probability a particular individual escaped infection is therefore $e^{-R_0 / N}$.\n\nIf $Z$ individuals have been infected, the probability of an individual escaping infection from all potential sources is $e^{-Z R_0 / N}$.\nIt follows that at the end of the epidemic a proportion $R(\\infty) = Z / N$ have been infected and the fraction remaining susceptible is $S(\\infty) = e^{-R(\\infty) R_0}$, which is equal to $1 - R(\\infty)$.\n\n::: {.callout-note collapse=\"true\"}\n$S(\\infty) = e^{-R(\\infty) R_0}$ can be calculated by acknowledging that at equilibrium ($t = \\infty$), $S(\\infty) = 1 - R(\\infty) = Z / N$, so substituting $R(\\infty)$ into $1 - e^{-Z R_0 / N}$ gives the desired result.\n\nIt could also be calculated by dividing $\\frac{\\dd{S}}{\\dd{t}}$ by $\\frac{\\dd{R}}{\\dd{t}}$:\n\n```{=tex}\n\\begin{aligned}\n\\frac{\\dd{S}}{\\dd{R}} &= - \\frac{\\beta S}{\\gamma} \\\\\n&= - R_0 S\n\\end{aligned}\n```\nwhich is a [separable differential equation](https://tutorial.math.lamar.edu/classes/de/separable.aspx), so can be integrated as follows:\n\n```{=tex}\n\\begin{aligned}\n- \\int_{0}^{t} \\frac{1}{R_0 S} \\dd{S} &= \\int_{0}^{t} \\dd{R} \\\\\n- \\frac{1}{R_0} \\left(\\ln{S(t)} - \\ln{S(0)} \\right) &= R(t) - \\cancelto{0}{R(0)} \\\\\n\\ln{S(t)} &= \\ln{S(0)} - R_0 R(t) \\\\\nS(t) &= S(0) e^{-R_0 R(t)}\n\n\\end{aligned}\n```\n:::\n\nPutting this together, we get:\n\n$$\n1 - R(\\infty) - e^{-R(\\infty) R_0} = 0\n$$\n\nRearranging, we have the estimator\n\n$$\n  \\hat{R_0} = \\frac{\\ln(1 - Z / N)}{-Z / N},\n$$\n\nwhich, in this case, evaluates to $\\frac{\\ln(1 - 512 / 764)}{-512 / 764} = 1.655$.\n\n::: exercise\n### Exercise 1\n:::\n\nThis equation shows the important one-to-one relationship between $R_0$ and the final epidemic size.\nPlot the relationship between the total epidemic size and $R_0$ for the complete range of values between 0 and 1.\n\n## Linear Approximation\n\nThe next method we introduce takes advantage of the fact that during the early stages of an outbreak, the number of infected individuals is given approximately as $I(t) \\approx I_0 e^{((R_0 - 1)(\\gamma + \\mu)t)}$.\nTaking logarithms of both sides, we have $\\ln(I(t)) \\approx \\ln(I_0) + (R_0 - 1)(\\gamma + \\mu)t$, showing that the log of the number of infected individuals is approximately linear in time with a slope that reflects both $R_0$ and the recovery rate.\n\nThis suggests that a simple linear regression fit to the first several data points on a log-scale, corrected to account for $\\gamma$ and $\\mu$, provides a rough and ready estimate of $R_0$.\nFor flu, we can assume $\\mu =0$ because the epidemic occurred over a time period during which natural mortality is negligible.\nFurther, assuming an infectious period of about 2.5 days, we use $\\gamma = (2.5)^{-1} = 0.4$ for the correction.\nFitting to the first four data points, we obtain the slope as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a linear model\nlinear_model <- lm(log(flu[1:4]) ~ day[1:4], data = flu)\n\n# Summary statistics for fit model\nsummary(linear_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = log(flu[1:4]) ~ day[1:4], data = flu)\n\nResiduals:\n       1        2        3        4 \n 0.03073 -0.08335  0.07450 -0.02188 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept) -0.02703    0.10218  -0.265  0.81611   \nday[1:4]     1.09491    0.03731  29.346  0.00116 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.08343 on 2 degrees of freedom\nMultiple R-squared:  0.9977,\tAdjusted R-squared:  0.9965 \nF-statistic: 861.2 on 1 and 2 DF,  p-value: 0.001159\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract slope parameter\ncoef(linear_model)[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nday[1:4] \n1.094913 \n```\n\n\n:::\n:::\n\n\nRearranging the linear equation above and denoting the slope coefficient by $\\hat \\beta_1$ we have the estimator $\\hat R_0 = \\hat \\beta_1 / \\gamma + 1$ giving $\\hat R_0 = 1.094913 / 0.4 + 1 \\approx 3.7$.\n\n::: exercise\n### Exercise 2\n:::\n\nOur estimate assumes that boys remained infectious during the natural course of infection.\nThe original report on this epidemic indicates that boys found to have symptoms were immediately confined to bed in the infirmary.\nThe report also indicates that only 1 out of 130 adults at the school exhibited any symptoms.\nIt is reasonable, then, to suppose that transmission in each case ceased once he had been admitted to the infirmary.\nSupposing admission happened within 24 hours of the onset of symptoms.\nHow does this affect our estimate of $R_0$?\nTwelve hours?\n\n::: exercise\n### Exercise 3\n:::\n\nBiweekly data for outbreaks of measles in three communities in Niamey, Niger are provided in the dataframe `niamey`.\nUse this method to obtain estimates of $R_0$ for measles from the first community assuming that the infectious period is approximately two weeks or $\\frac{14}{365} \\approx 0.0384$ years.\n\n::: exercise\n### Exercise 4\n:::\n\nA defect with this method is that it uses only a small fraction of the information that might be available, i.e., the first few data points.\nIndeed, there is nothing in the method that tells one how many data points to use--this is a matter of judgment.\nFurther, there is a tradeoff in that as more and more data points are used the precision of the estimate increases, but this comes at a cost of additional bias.\nPlot the estimate of $R_0$ obtained from $n=3, 4, 5, ...$ data points against the standard error of the slope from the regression analysis to show this tradeoff.\n\n## Estimating dynamical parameters with least squares\n\nThe objective of the previous exercise was to estimate $R_0$.\nKnowing $R_0$ is critical to understanding the dynamics of any epidemic system.\nIt is, however, a composite quantity and is not sufficient to completely describe the epidemic trajectory.\nFor this, we require estimates for all parameters of the model.\nIn this exercise, we introduce a simple approach to model estimation called **least squares fitting**, sometimes called **trajectory matching**.\nThe basic idea is that we find the values of the model parameters that minimize the squared differences between model predictions and the observed data.\nTo demonstrate least squares fitting, we consider an outbreak of measles in Niamey, Niger, reported on by [@graisEstimatingTransmissionIntensity2006].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace an \"NA\"\nniamey[5, 3] <- 0\n\nniamey_df <- niamey %>%\n  # Rename columns to remove automatic \"V1\" etc columns names\n  rename_with(., ~ paste0(\"Site_\", str_remove(.x, \"V\"))) %>%\n  # Add a column for the biweekly time period\n  mutate(biweek = 1:16) %>%\n  # Convert to long format for plotting\n  pivot_longer(\n    cols = contains(\"Site\"),\n    names_to = \"site\",\n    values_to = \"cases\"\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of colors for each site in the Niamey dataset\nniamey_site_colors <- RColorBrewer::brewer.pal(3, \"Dark2\")\n# Assign names to the colors\nnames(niamey_site_colors) <- unique(niamey_df$site)\n\n# Create a vector of labels for each site for nicer plotting legends\nniamey_site_labels <- str_replace_all(names(niamey_site_colors), \"_\", \" \")\nnames(niamey_site_labels) <- names(niamey_site_colors)\n```\n:::\n\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\nggplot(\n  niamey_df,\n  aes(x = biweek, y = cases, color = site, fill = site, group = site)\n) +\n  geom_line() +\n  geom_point(shape = 21, size = 5, alpha = 0.8) +\n  scale_color_manual(\n    values = niamey_site_colors,\n    aesthetics = c(\"color\", \"fill\"),\n    labels = niamey_site_labels\n  ) +\n  guides(color = \"none\") +\n  labs(x = \"Biweek\", y = \"Number of Cases\", fill = \"Site Number\") +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n\n## Dynamical Model\n\nFirst, we write a specialized function for simulating the SIR model in a case where the removal rate is *\"hard-wired\"* and with no demography.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Basic SIR model\n#'\n#' A basic SIR model with no demographic structure to be used in deSolve\n#'\n#' @param time deSolve passes the time parameter to the function.\n#' @param state A vector of states.\n#' @param params The beta parameter\n#' @param ... Other arguments passed by deSolve.\n#'\n#' @return A deSolve matrix of states at each time step.\n#' @examples\n#' sir_params <- 0.0005\n#' sir_init_states <- c(S = 5000, I = 1, R = 0)\n#' sim_times <- seq(0, 16 / 365, by = 0.1 / 365)\n#'\n#' sir_sol <- deSolve::ode(\n#'    y = sir_init_states,\n#'    times = sim_times,\n#'    func = closed_sir_model,\n#'    parms = sir_params\n#' ))\nclosed_sir_model <- function(time, state, params, ...) {\n  # Unpack states\n  S <- state[\"S\"]\n  I <- state[\"I\"]\n\n  # Unpack parameters\n  beta <- params\n  dur_inf <- 14 / 365\n  gamma <- 1 / dur_inf\n\n  new_inf <- beta * S * I\n\n  # Calculate the ODEs\n  dSdt <- -new_inf\n  dIdt <- new_inf - (gamma * I)\n\n  # Return the ODEs\n  return(list(c(dSdt, dIdt, new_inf)))\n}\n```\n:::\n\n\n## Interactive Optimization\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n```{ojs}\n//| echo: false\nfiltered_niamey_data = aq.table(niamey_data)\n    .filter(aq.escape(d => d.site == site_select))\n```\n\n```{ojs}\n//| echo: false\nreset_S = 10000\nreset_I = 20\nreset_beta = 5.00\n```\n\n```{ojs}\n//| echo: false\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n```\n\n```{ojs}\n//| echo: false\nfunction sse(obs, preds) {\n\n    if(obs.length == preds.length) {\n        var squared_errs = obs.map((e, i) => (e - preds[i])**2 )\n        return squared_errs.reduce((a, b) => a + b, 0)\n    } else {\n        return(\"lengths are not the same\")\n    }\n}\n```\n\n```{ojs}\n//| panel: sidebar\n//| echo: false\nviewof reset = Inputs.button([\n  [\"Reset all sliders\", () => {\n    set(viewof S0, reset_S)\n    set(viewof I0, reset_I)\n    set(viewof beta_input, reset_beta)\n  }]\n])\nviewof S0 = Inputs.range(\n    [500, 15000],\n    {value: reset_S, step: 1, label: md`${tex`S(0)`}`}\n)\n\nviewof I0 = Inputs.range(\n    [0.001, 50],\n    {value: reset_I, step: 0.001, label: md`${tex`I(0)`}`}\n)\n\nviewof beta_input = Inputs.range(\n    [1, 100],\n    {value: reset_beta, step: 0.001, label: md`${tex`\\beta (\\times 10^{-3})`}`}\n)\n\nviewof site_select = Inputs.select(\n    [\"Site 1\", \"Site 2\", \"Site 3\"],\n    {label: \"Select a site:\"}\n)\n\n// convert to daily time scale as easier to manipulate\nbeta = (beta_input / 365) * (10 ** (-3))\n\nmd`${tex`R_0 = ${R0_str}`}`\n```\n\n```{ojs}\n//| echo: false\ndur_inf = 14\ngamma = 1 / dur_inf\nR0 = beta * (S0 + I0)/ gamma\n\nR0_str = R0.toPrecision(2).toLocaleString()\n```\n\n```{ojs}\n//| echo: false\ndt = 0.01\ntmax = 16 * 14\n```\n\n```{ojs}\n//| echo: false\nimport {odeRK4} from '@rreusser/integration@3064'\nimport { aq, op } from '@uwdata/arquero'\n```\n\n```{ojs}\n//| echo: false\nfunction sir(dydt, y, t) {\n    dydt[3] = beta * y[0] * y[1]\n\n    dydt[0] = - dydt[3]\n    dydt[1] = dydt[3] - gamma * y[1]\n    dydt[2] = gamma * y[1]\n}\n```\n\n```{ojs}\n//| echo: false\nfunction simulate(f, t0, y0, dt, tmax) {\n    var t = t0\n    var y = y0\n    var i = 0\n\n    var ysim = [y0]\n\n    for (t = t0 + dt; t <= tmax; t += dt) {\n        ysim.push(odeRK4([], ysim[i], f, dt))\n        i += 1\n    }\n\n    // return cumulative infections\n    return ysim.map(d => d[3])\n}\n```\n\n```{ojs}\n//| echo: false\nsir_sol = simulate(sir, 0, [S0, I0, 0.0, 0.0], dt, tmax)\n```\n\n```{ojs}\n//| echo: false\nsiteColors = [\"#1b9e77\", \"#d95f02\", \"#7570b3\"]\n```\n\n```{ojs}\n//| echo: false\n// Create an array of time indices, dropping first as from returns index 0, which\n// doesn't exist in the real data\ntimes = Array.from({length: 17}, (_, i) => i * 14).slice(1)\ntindex = times.map((e, i) => e * (1 / dt))\n\ncum_inc = tindex.map((i) => sir_sol[i])\n\npreds = [cum_inc[0] + I0, ...cum_inc.map((e, i) => cum_inc[i] - cum_inc[i-1]).slice(1)]\n\nsir_tbl = aq.table({\n    Biweek: times.map(t => t / 14),\n    \"Cumulative Incidence\": cum_inc,\n    \"Number of Individuals\": preds\n})\n\nsim_sse = [({\n    sse: sse(\n            filtered_niamey_data.array(\"Number of Individuals\"),\n            preds\n        ).toPrecision(4),\n    Biweek: 3,\n    \"Number of Individuals\": Math.max(\n        ...sir_tbl.array(\"Number of Individuals\"),\n        ...filtered_niamey_data.array(\"Number of Individuals\")\n    ) * 0.9\n})]\n```\n\n```{ojs}\n//| echo: false\n//| panel: fill\nPlot.plot({\n    color: {\n        legend: true,\n        domain: [\"Site 1\", \"Site 2\", \"Site 3\"],\n        range: siteColors,\n    },\n    style: {fontSize: \"20px\"},\n    marginLeft: 75,\n    marginTop: 40,\n    marginBottom: 55,\n    grid: true,\n    width: 800,\n    height: 670,\n    marks: [\n        Plot.lineY(\n            sir_tbl,\n            {x: \"Biweek\", y: \"Number of Individuals\", stroke: \"#4d4d4dff\", strokeWidth: 6, strokeOpacity: 0.8}\n        ),\n        Plot.dot(\n            filtered_niamey_data,\n            {x: \"Biweek\", y: \"Number of Individuals\", stroke: \"site\", fill: \"site\", fillOpacity: 0.6, r: 12}\n        ),\n        Plot.lineY(\n            filtered_niamey_data,\n            {x: \"Biweek\", y: \"Number of Individuals\", stroke: \"site\"}\n        ),\n        Plot.text(\n            sim_sse,\n            {x: \"Biweek\", y: \"Number of Individuals\", text: (d) => `SSE = ${d.sse}`, dx: 0, dy: 0, fontWeight: \"bold\"}\n        )\n    ]\n})\n```\n\n## Objective Function\n\nNow we set up a function that will calculate the sum of the squared differences between the observations and the model at any parameterization (more commonly known as *\"sum of squared errors\"*).\nIn general, this is called the **objective function** because it is the quantity that optimization seeks to minimize.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Calculate the Sum of Squared Errors\n#'\n#' A function to take in biweekly incidence data, and SIR parameters, and\n#' calculate the SSE\n#'\n#' @param params A vector of parameter values\n#' @param data A dataframe containing biweekly incidence data in the case column\n#'\n#' @return The SSE of type double\n#' @examples\nsse_sir <- function(params, data) {\n  # Convert biweekly time series into annual time scale\n  # Daily time scale has requires beta values to be too small - doesn't\n  # optimize well\n  dt <- 0.01\n  max_biweek <- max(data$biweek)\n  t <- seq(0, max_biweek * 14, dt) / 365\n\n  # Extract the number of observed incidence\n  obs_inc <- data$cases\n\n  # Note the parameters are updated throughout the optimization process by\n  # the optim() function\n  # Unpack the transmission parameter and exponentiate to fit on ln scale\n  beta <- exp(params[[\"beta\"]])\n\n  # Unpack the initial states and exponentiate to fit on normal scale\n  S_init <- exp(params[[\"S_init\"]])\n  I_init <- exp(params[[\"I_init\"]])\n\n  # Fit SIR model to the parameters\n  sol <- deSolve::ode(\n    y = c(S = S_init, I = I_init, new_inf = 0),\n    times = t,\n    func = closed_sir_model,\n    parms = beta,\n    # Use rk4 as fixed time steps, which is important for indexing\n    method = \"rk4\"\n  )\n\n  # Extract the cumulative incidence\n  cum_inc <- sol[, \"new_inf\"]\n\n  # Find the indices of the cumulative incidence to extract\n  biweek_index <- seq(1, max_biweek) * (14 / dt) + 1\n\n  # Index cumulative incidence to get the values at the end of the biweeks\n  biweek_cum_inc <- cum_inc[biweek_index]\n\n  # Calculate the biweekly incidence by using the difference between\n  # consecutive biweeks. Need to manually prepend first week's incidence\n  # and add in the initial number of infectious individuals, as ODE model\n  # only returns the cumulative differences, which is 0 at the start.\n  biweek_inc <- c(biweek_cum_inc[1] + I_init, diff(biweek_cum_inc, lag = 1))\n\n  # return SSE of predicted vs observed incidence\n  return(sum((biweek_inc - obs_inc)^2))\n}\n```\n:::\n\n\nNotice that the code for `sse_sir()` makes use of the following modeling trick.\nWe know that $\\beta$, $S_0$, and $I_0$ must be positive, but our search to optimize these parameters will be over the entire number line.\nWe could constrain the search using a more sophisticated algorithm, but this might introduce other problems (i.e., stability at the boundaries).\nInstead, we parameterize our objective function (`sse_sir`) in terms of some alternative variables $\\ln(\\beta)$, $\\ln(S_0)$, and $\\ln(I_0)$.\nWhile these numbers range from $-\\infty$ to $\\infty$ (the range of our search) they map to our model parameters on a range from $0$ to $\\infty$ (the range that is biologically meaningful).\n\n## Optimization\n\nOur final step is to use the function `optim` to find the values of $\\beta$, $S_0$, and $I_0$ that minimize the sum of squared errors as calculated using our function.\n\nFinally, we plot these fits against the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initial guess\nsse_optim_params <- c(beta = log(0.055), S_init = log(5000), I_init = log(1))\n\n# Create a dataframe of optimized parameters\nniamey_optims <- niamey_df %>%\n  # Create a nested dataframe i.e. one row for each site, and the data column\n  # now is a list column that contains a separate dataframe of times and\n  # cases for each site\n  nest(data = -site) %>%\n  mutate(\n    # Map the optim() function call to each of the separate dataframes\n    # stored in the nested data column we just created\n    fit = map(data, ~ optim(sse_optim_params, sse_sir, data = .x)),\n    # Map the exp() function to each of the model fits just created, and\n    # output to a dataframe instead of a list (like in map()), for easier\n    # use in the plottinge predictions later\n    map_dfr(fit, ~ exp(.x$par))\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nniamey_optims %>%\n  select(-c(data, fit)) %>%\n  mutate(site = str_replace_all(site, \"_\", \" \")) %>%\n  gt() %>%\n  fmt_number(columns = -site, decimals = 3) %>%\n  fmt_scientific(columns = beta, decimals = 3) %>%\n  # Relabel the column headers\n  cols_label(\n    site = md(\"**Site**\"),\n    beta = md(\"**Beta**\"),\n    S_init = md(\"**Initial S**\"),\n    I_init = md(\"**Initial I**\")\n  ) %>%\n  # Apply style to the table with gray alternating rows\n  opt_stylize(style = 1, color = 'gray') %>%\n  # Increate space between columns\n  opt_horizontal_padding(scale = 3) %>%\n  cols_align(\"center\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"snbqwijgxk\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#snbqwijgxk table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#snbqwijgxk thead, #snbqwijgxk tbody, #snbqwijgxk tfoot, #snbqwijgxk tr, #snbqwijgxk td, #snbqwijgxk th {\n  border-style: none;\n}\n\n#snbqwijgxk p {\n  margin: 0;\n  padding: 0;\n}\n\n#snbqwijgxk .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #000000;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #000000;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#snbqwijgxk .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#snbqwijgxk .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#snbqwijgxk .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#snbqwijgxk .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#snbqwijgxk .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#snbqwijgxk .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 15px;\n  padding-right: 15px;\n  overflow-x: hidden;\n}\n\n#snbqwijgxk .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#snbqwijgxk .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#snbqwijgxk .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#snbqwijgxk .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#snbqwijgxk .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#snbqwijgxk .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#snbqwijgxk .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#snbqwijgxk .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#snbqwijgxk .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#snbqwijgxk .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#snbqwijgxk .gt_stub {\n  color: #FFFFFF;\n  background-color: #5F5F5F;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #5F5F5F;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#snbqwijgxk .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 15px;\n  padding-right: 15px;\n  vertical-align: top;\n}\n\n#snbqwijgxk .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#snbqwijgxk .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#snbqwijgxk .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#snbqwijgxk .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#snbqwijgxk .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#snbqwijgxk .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_striped {\n  background-color: #F4F4F4;\n}\n\n#snbqwijgxk .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#snbqwijgxk .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#snbqwijgxk .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#snbqwijgxk .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#snbqwijgxk .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#snbqwijgxk .gt_left {\n  text-align: left;\n}\n\n#snbqwijgxk .gt_center {\n  text-align: center;\n}\n\n#snbqwijgxk .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#snbqwijgxk .gt_font_normal {\n  font-weight: normal;\n}\n\n#snbqwijgxk .gt_font_bold {\n  font-weight: bold;\n}\n\n#snbqwijgxk .gt_font_italic {\n  font-style: italic;\n}\n\n#snbqwijgxk .gt_super {\n  font-size: 65%;\n}\n\n#snbqwijgxk .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#snbqwijgxk .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#snbqwijgxk .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#snbqwijgxk .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#snbqwijgxk .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#snbqwijgxk .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#snbqwijgxk .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#snbqwijgxk .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#snbqwijgxk div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"site\"><span data-qmd-base64=\"KipTaXRlKio=\"><span class='gt_from_md'><strong>Site</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"beta\"><span data-qmd-base64=\"KipCZXRhKio=\"><span class='gt_from_md'><strong>Beta</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"S_init\"><span data-qmd-base64=\"KipJbml0aWFsIFMqKg==\"><span class='gt_from_md'><strong>Initial S</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"I_init\"><span data-qmd-base64=\"KipJbml0aWFsIEkqKg==\"><span class='gt_from_md'><strong>Initial I</strong></span></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"site\" class=\"gt_row gt_center\">Site 1</td>\n<td headers=\"beta\" class=\"gt_row gt_center\">5.370&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−3</sup></td>\n<td headers=\"S_init\" class=\"gt_row gt_center\">8,566.648</td>\n<td headers=\"I_init\" class=\"gt_row gt_center\">1.349</td></tr>\n    <tr><td headers=\"site\" class=\"gt_row gt_center gt_striped\">Site 2</td>\n<td headers=\"beta\" class=\"gt_row gt_center gt_striped\">8.317&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−3</sup></td>\n<td headers=\"S_init\" class=\"gt_row gt_center gt_striped\">5,961.388</td>\n<td headers=\"I_init\" class=\"gt_row gt_center gt_striped\">0.201</td></tr>\n    <tr><td headers=\"site\" class=\"gt_row gt_center\">Site 3</td>\n<td headers=\"beta\" class=\"gt_row gt_center\">7.134&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−2</sup></td>\n<td headers=\"S_init\" class=\"gt_row gt_center\">792.990</td>\n<td headers=\"I_init\" class=\"gt_row gt_center\">0.001</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n::: callout-note\nYou may have noticed that you can achieve slightly different results for the optimal parameter values using the interactive plot than are being presented here (though they are very similar).\nThis is because while the optimization code is running in `R`, the interactive plot and the calculation of the SSE is implemented using JavaScript.\nTherefore, despite using the same underlying model structure, the answers will vary slightly, because the ODE solvers are different, resulting in different model simulations.\nThe difference is not enough to be concerned with here, but it is a point that's worth being aware of when you build your own models - you may want to perform sensitivity to confirm that your model implementation is not driving the magnitude of the results you see, and the inferences you make.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nniamey_predictions <- niamey_optims %>%\n  mutate(\n    # For each of the different site's nested dataframes, fit the SIR model\n    # with the optimal parameters to get best fit predictions\n    predictions = pmap(\n      .l = list(\n        S_init = S_init,\n        I_init = I_init,\n        beta = beta,\n        time_data = data\n      ),\n      .f = function(S_init, I_init, beta, time_data) {\n        site_times <- time_data$biweek * 14 / 365\n\n        # Return a dataframe of model solutions\n        as_tibble(ode(\n          y = c(S = S_init, I = I_init, new_inf = 0),\n          times = site_times,\n          func = closed_sir_model,\n          parms = beta,\n          hmax = 1 / 120\n        )) %>%\n          # Make sure all values are numeric for plotting purposes\n          mutate(across(everything(), as.numeric)) %>%\n          mutate(\n            incidence = ifelse(\n              row_number() == 1,\n              new_inf[1],\n              diff(new_inf, lag = 1)\n            )\n          )\n      }\n    )\n  ) %>%\n  unnest(c(data, predictions))\n```\n:::\n\n\n::: callout-important\nAn important point to note is that our data is biweekly **incidence** (new cases in time period), whereas out SIR model produces **prevalence** (total cases at any time point).\nTo account for this, our SIR model returns the cumulative incidence (line 32 of the model code), and our objective function extracts the biweekly incidence (lines 41-54), to ensure we are fitting the same data!\nThis is a common source of error in interpretation when people fit models to data.\n:::\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# Create a dataframe to store the positions of the text labels\nniamey_preds_labels <- tibble(\n  site = c(\"Site_1\", \"Site_2\"),\n  x_label = c(6.5, 6.5),\n  x_arrow_just = c(-0.5, -0.5),\n  x_arrow_end = c(7, 7.75),\n  y_label = c(900, 600),\n  y_arrow_just = c(-80, -70),\n  y_arrow_end = c(350, 290),\n  commentary = c(\"**Predicted\", \"**Observed\"),\n  color = c(\"grey20\", niamey_site_colors[\"Site_2\"])\n)\n\nggplot(niamey_predictions, aes(x = biweek, group = site)) +\n  # Plot the actual data in color\n  geom_line(aes(y = cases, color = site)) +\n  geom_point(aes(y = cases, color = site), size = 4, alpha = 0.8) +\n  # Plot the best-fit model predictions in black\n  geom_line(aes(y = incidence), color = \"black\") +\n  scale_color_manual(\n    values = niamey_site_colors,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  # Place each site on it's own subplot and change labels\n  facet_wrap(\n    ~site,\n    ncol = 1,\n    scales = \"free_y\",\n    labeller = as_labeller(niamey_site_labels)\n  ) +\n  labs(x = \"Biweek\", y = \"Number of Case\") +\n  theme(legend.position = \"none\") +\n  ggtext::geom_textbox(\n    data = niamey_preds_labels,\n    aes(\n      label = paste0(\n        \"<span style = \\\"color:\",\n        color,\n        \"\\\">\",\n        commentary,\n        \" Cases**\",\n        \"</span>\"\n      ),\n      x = x_label,\n      y = y_label\n    ),\n    size = 4,\n    fill = NA,\n    box.colour = NA\n  ) +\n  geom_curve(\n    data = niamey_preds_labels,\n    aes(\n      x = x_label + x_arrow_just,\n      xend = x_arrow_end,\n      y = y_label + y_arrow_just,\n      yend = y_arrow_end\n    ),\n    linewidth = 0.75,\n    arrow = arrow(length = unit(0.2, \"cm\")),\n    curvature = list(0.25),\n    color = \"grey20\"\n  )\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-30-1.png){width=100%}\n:::\n:::\n\n\n::: exercise\n### Exercise 5\n:::\n\nTo make things easier, we have assumed the infectious period is known to be 14 days.\nIn terms of years, $\\text{D} = \\frac{14}{365} \\approx 0.0384$, and the recovery rate is the inverse i.e., $\\gamma = \\frac{14}{365}$.\nNow, modify the code above to estimate $\\gamma$ and $\\beta$ simultaneously.\n\n::: exercise\n### Exercise 6\n:::\n\nWhat happens if one or both of the other unknowns ($S_0$ and $I_0$) is fixed instead of $\\gamma$?\n\n## Solutions\n\n### Exercise 1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np_infec <- (seq(0, 1, by = 0.001))\nr0_p <- (log(1 - p_infec)) / (-p_infec)\nplot(\n  x = p_infec,\n  y = r0_p,\n  main = \"Relationship between final proportion infected and R0\",\n  xlab = \"Final proportion infected\",\n  ylab = \"R0\"\n)\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Exercise 2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#A: If the cases were isolated after 24 hours, then gamma would be 1/1 = 1, and if the cases were isolated after 12 hours, gamma would be 1/0.5 = 2. R0 would be calculated as the beta coefficient over gamma, below:\n\nr0_g1 <- 1.094913 / 1 + 1\nr0_g1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.094913\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nr0_g2 <- 1.094913 / 2 + 1\nr0_g2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.547457\n```\n\n\n:::\n:::\n\n\n### Exercise 3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nniamey[5, 3] <- 0 #replace a \"NA\"\n#the command below organizes the data so it can be plotted and analyzed\nniamey <- data.frame(\n  biweek = rep(seq(1, 16), 3),\n  site = c(rep(1, 16), rep(2, 16), rep(3, 16)),\n  cases = c(niamey[, 1], niamey[, 2], niamey[, 3])\n) #define \"biweeks\"\n\n# As the data are reported every two weeks, this corresponds to the 10th observation. Let’s fit a linear model\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# First let's see what the outbreak looks like for the first community on a linear scale\nplot(\n  niamey$biweek[niamey$site == 1],\n  niamey$cases[niamey$site == 1],\n  type = 'p',\n  col = niamey$site,\n  xlab = 'Biweek',\n  ylab = 'Cases'\n)\nlines(niamey$biweek[niamey$site == 1], niamey$cases[niamey$site == 1])\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Now let’s try it on a log scale to see until when the outbreak is roughly linear\nplot(\n  niamey$biweek[niamey$site == 1],\n  niamey$cases[niamey$site == 1],\n  type = 'p',\n  col = niamey$site,\n  xlab = 'Biweek',\n  ylab = 'Cases',\n  log = 'y'\n)\nlines(niamey$biweek[niamey$site == 1], niamey$cases[niamey$site == 1])\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# here we create a \"week\" variable to run the analysis on a weekly\nniamey$week <- niamey$biweek * 2\n# we use the `head` command to take the first N values of a vector. In this case, we're taking the first 10 values of our outcome (cases) and predictor (time) variables.\nmodel <- lm(\n  log(head(niamey$cases[niamey$site == 1], 10)) ~\n    (head(niamey$week[niamey$site == 1], 10))\n)\nsummary(model) #summary statistics for fit model\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = log(head(niamey$cases[niamey$site == 1], 10)) ~ \n    (head(niamey$week[niamey$site == 1], 10)))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.51796 -0.07364  0.00790  0.10727  0.36805 \n\nCoefficients:\n                                        Estimate Std. Error t value Pr(>|t|)\n(Intercept)                              2.59679    0.17563   14.79 4.31e-07\nhead(niamey$week[niamey$site == 1], 10)  0.21960    0.01415   15.52 2.96e-07\n                                           \n(Intercept)                             ***\nhead(niamey$week[niamey$site == 1], 10) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2571 on 8 degrees of freedom\nMultiple R-squared:  0.9678,\tAdjusted R-squared:  0.9638 \nF-statistic: 240.8 on 1 and 8 DF,  p-value: 2.963e-07\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Now let's get the slope and display it\nslope <- coef(model)[2] #extract slope parameter\nslope #print to screen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhead(niamey$week[niamey$site == 1], 10) \n                              0.2196041 \n```\n\n\n:::\n:::\n\n\nAs we ran the model by weeks, the $\\gamma$ value is $2^{-1}$ and $\\hat R_0 = \\hat \\beta_1 / \\gamma +1$ giving $\\hat R_0=0.2196041/0.5+1 \\approx 1.44$.\n\n### Exercise 4\n\nHere, we can use a loop and repeat the regression procedure we used above for varying numbers of initial data points in our model.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nslope <- NULL\nse <- NULL\nfor (i in 3:18) {\n  model <- lm(\n    log(head(niamey$cases[niamey$site == 1], i)) ~\n      (head(niamey$week[niamey$site == 1], i))\n  )\n  slope <- c(slope, as.numeric(coef(model)[2]))\n  se <- c(se, summary(model)$coefficients[4])\n}\nR0 <- slope / 0.5 + 1\nplot(R0, se, ylab = 'Standard error')\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n### Exercise 5\n\nFirst, let's add in $\\gamma$ estimation into the `sse.sir` function and create a new `sse.sir` function called `sse.sir.g`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Basic SIR model\n#'\n#' A basic SIR model with no demographic structure to be used in deSolve\n#'\n#' @param time deSolve passes the time parameter to the function.\n#' @param state A vector of states.\n#' @param params The beta parameter\n#' @param ... Other arguments passed by deSolve.\n#'\n#' @return A deSolve matrix of states at each time step.\n#' @examples\n#' sir_params <- 0.0005\n#' sir_init_states <- c(S = 5000, I = 1, R = 0)\n#' sim_times <- seq(0, 16 / 365, by = 0.1 / 365)\n#'\n#' sir_sol <- deSolve::ode(\n#'    y = sir_init_states,\n#'    times = sim_times,\n#'    func = closed_sir_model,\n#'    parms = sir_params\n#' )\n\n# Create a new SIR model to include gamma\nclosed_sir_model_g <- function(time, state, params, ...) {\n  # Unpack states\n  S <- state[\"S\"]\n  I <- state[\"I\"]\n\n  # Unpack parameters\n  beta <- params[[\"beta\"]]\n  dur_inf <- 14 / 365\n  gamma <- params[[\"gamma\"]]\n\n  new_inf <- beta * S * I\n\n  # Calculate the ODEs\n  dSdt <- -new_inf\n  dIdt <- new_inf - (gamma * I)\n\n  # Return the ODEs\n  return(list(c(dSdt, dIdt, new_inf)))\n}\n\n\n#' Calculate the Sum of Squared Errors\n#'\n#' A function to take in biweekly incidence data, and SIR parameters, and\n#' calculate the SSE\n#'\n#' @param params A vector of parameter values\n#' @param data A dataframe containing biweekly incidence data in the case column\n#'\n#' @return The SSE of type double\n#' @examples\nsse_sir_g <- function(params, data) {\n  # Convert biweekly time series into annual time scale\n  # Daily time scale has requires beta values to be too small - doesn't\n  # optimize well\n  dt <- 0.01\n  max_biweek <- max(data$biweek)\n  t <- seq(0, max_biweek * 14, dt) / 365\n\n  # Extract the number of observed incidence\n  obs_inc <- data$cases\n\n  # Note the parameters are updated throughout the optimization process by\n  # the optim() function\n  # Unpack the transmission parameter and exponentiate to fit on ln scale\n  beta <- exp(params[[\"beta\"]])\n  gamma <- exp(params[[\"gamma\"]])\n\n  in_parms <- c(\"beta\" = beta, \"gamma\" = gamma)\n  # Unpack the initial states and exponentiate to fit on normal scale\n  S_init <- exp(params[[\"S_init\"]])\n  I_init <- exp(params[[\"I_init\"]])\n\n  # Fit SIR model to the parameters\n  sol <- deSolve::ode(\n    y = c(S = S_init, I = I_init, new_inf = 0),\n    times = t,\n    func = closed_sir_model_g,\n    parms = in_parms,\n    # Use rk4 as fixed time steps, which is important for indexing\n    method = \"rk4\"\n  )\n\n  # Extract the cumulative incidence\n  cum_inc <- sol[, \"new_inf\"]\n\n  # Find the indices of the cumulative incidence to extract\n  biweek_index <- seq(1, max_biweek) * (14 / dt) + 1\n\n  # Index cumulative incidence to get the values at the end of the biweeks\n  biweek_cum_inc <- cum_inc[biweek_index]\n\n  # Calculate the biweekly incidence by using the difference between\n  # consecutive biweeks. Need to manually prepend first week's incidence\n  # and add in the initial number of infectious individuals, as ODE model\n  # only returns the cumulative differences, which is 0 at the start.\n  biweek_inc <- c(biweek_cum_inc[1] + I_init, diff(biweek_cum_inc, lag = 1))\n\n  # return SSE of predicted vs observed incidence\n  return(sum((biweek_inc - obs_inc)^2))\n}\n```\n:::\n\n\nNow we can run the code to optimize, beta, gamma, I0, and S0\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsse_optim_params_g <- c(\n  beta = log(0.055),\n  gamma = log(365 / 14),\n  S_init = log(5000),\n  I_init = log(1)\n)\n\n# Create a dataframe of optimized parameters\nniamey_optims_g <- niamey_df %>%\n  # Create a nested dataframe i.e. one row for each site, and the data column\n  # now is a list column that contains a separate dataframe of times and\n  # cases for each site\n  nest(data = -site) %>%\n  mutate(\n    # Map the optim() function call to each of the separate dataframes\n    # stored in the nested data column we just created\n    fit = map(data, ~ optim(sse_optim_params_g, sse_sir_g, data = .x)),\n    # Map the exp() function to each of the model fits just created, and\n    # output to a dataframe instead of a list (like in map()), for easier\n    # use in the plottinge predictions later\n    map_dfr(fit, ~ exp(.x$par))\n  )\n```\n:::\n\n\nNow we can get our optimized parameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nniamey_optims_g %>%\n  select(-c(data, fit)) %>%\n  mutate(site = str_replace_all(site, \"_\", \" \")) %>%\n  gt() %>%\n  fmt_number(columns = -site, decimals = 3) %>%\n  fmt_scientific(columns = beta, decimals = 3) %>%\n  # Relabel the column headers\n  cols_label(\n    site = md(\"**Site**\"),\n    beta = md(\"**Beta**\"),\n    gamma = md(\"**Gamma**\"),\n    S_init = md(\"**Initial S**\"),\n    I_init = md(\"**Initial I**\")\n  ) %>%\n  # Apply style to the table with gray alternating rows\n  opt_stylize(style = 1, color = 'gray') %>%\n  # Increate space between columns\n  opt_horizontal_padding(scale = 3) %>%\n  cols_align(\"center\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hbexotakij\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#hbexotakij table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#hbexotakij thead, #hbexotakij tbody, #hbexotakij tfoot, #hbexotakij tr, #hbexotakij td, #hbexotakij th {\n  border-style: none;\n}\n\n#hbexotakij p {\n  margin: 0;\n  padding: 0;\n}\n\n#hbexotakij .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #000000;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #000000;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hbexotakij .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hbexotakij .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hbexotakij .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hbexotakij .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hbexotakij .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#hbexotakij .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hbexotakij .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 15px;\n  padding-right: 15px;\n  overflow-x: hidden;\n}\n\n#hbexotakij .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hbexotakij .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hbexotakij .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hbexotakij .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hbexotakij .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#hbexotakij .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hbexotakij .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#hbexotakij .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hbexotakij .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hbexotakij .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hbexotakij .gt_stub {\n  color: #FFFFFF;\n  background-color: #5F5F5F;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #5F5F5F;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#hbexotakij .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 15px;\n  padding-right: 15px;\n  vertical-align: top;\n}\n\n#hbexotakij .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hbexotakij .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#hbexotakij .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#hbexotakij .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#hbexotakij .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hbexotakij .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#hbexotakij .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#hbexotakij .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#hbexotakij .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  padding-right: 15px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#hbexotakij .gt_striped {\n  background-color: #F4F4F4;\n}\n\n#hbexotakij .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#hbexotakij .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hbexotakij .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#hbexotakij .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hbexotakij .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n#hbexotakij .gt_left {\n  text-align: left;\n}\n\n#hbexotakij .gt_center {\n  text-align: center;\n}\n\n#hbexotakij .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hbexotakij .gt_font_normal {\n  font-weight: normal;\n}\n\n#hbexotakij .gt_font_bold {\n  font-weight: bold;\n}\n\n#hbexotakij .gt_font_italic {\n  font-style: italic;\n}\n\n#hbexotakij .gt_super {\n  font-size: 65%;\n}\n\n#hbexotakij .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#hbexotakij .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hbexotakij .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hbexotakij .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hbexotakij .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hbexotakij .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hbexotakij .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#hbexotakij .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#hbexotakij div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"site\"><span data-qmd-base64=\"KipTaXRlKio=\"><span class='gt_from_md'><strong>Site</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"beta\"><span data-qmd-base64=\"KipCZXRhKio=\"><span class='gt_from_md'><strong>Beta</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"gamma\"><span data-qmd-base64=\"KipHYW1tYSoq\"><span class='gt_from_md'><strong>Gamma</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"S_init\"><span data-qmd-base64=\"KipJbml0aWFsIFMqKg==\"><span class='gt_from_md'><strong>Initial S</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"I_init\"><span data-qmd-base64=\"KipJbml0aWFsIEkqKg==\"><span class='gt_from_md'><strong>Initial I</strong></span></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"site\" class=\"gt_row gt_center\">Site 1</td>\n<td headers=\"beta\" class=\"gt_row gt_center\">5.854&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−3</sup></td>\n<td headers=\"gamma\" class=\"gt_row gt_center\">81.150</td>\n<td headers=\"S_init\" class=\"gt_row gt_center\">17,113.450</td>\n<td headers=\"I_init\" class=\"gt_row gt_center\">0.786</td></tr>\n    <tr><td headers=\"site\" class=\"gt_row gt_center gt_striped\">Site 2</td>\n<td headers=\"beta\" class=\"gt_row gt_center gt_striped\">9.066&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−3</sup></td>\n<td headers=\"gamma\" class=\"gt_row gt_center gt_striped\">77.613</td>\n<td headers=\"S_init\" class=\"gt_row gt_center gt_striped\">11,030.375</td>\n<td headers=\"I_init\" class=\"gt_row gt_center gt_striped\">0.142</td></tr>\n    <tr><td headers=\"site\" class=\"gt_row gt_center\">Site 3</td>\n<td headers=\"beta\" class=\"gt_row gt_center\">8.517&nbsp;×&nbsp;10<sup style='font-size: 65%;'>−2</sup></td>\n<td headers=\"gamma\" class=\"gt_row gt_center\">351.697</td>\n<td headers=\"S_init\" class=\"gt_row gt_center\">4,462.286</td>\n<td headers=\"I_init\" class=\"gt_row gt_center\">0.000</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nGetting new predictions from the optimized parameters and a new model run for each site.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nniamey_predictions_g <- niamey_optims_g %>%\n  mutate(\n    # For each of the different site's nested dataframes, fit the SIR model\n    # with the optimal parameters to get best fit predictions\n    predictions = pmap(\n      .l = list(\n        S_init = S_init,\n        I_init = I_init,\n        beta = beta,\n        gamma = gamma,\n        time_data = data\n      ),\n      .f = function(S_init, I_init, beta, gamma, time_data) {\n        site_times <- time_data$biweek * 14 / 365\n\n        in_parms <- c(\"beta\" = beta, \"gamma\" = gamma)\n        # Return a dataframe of model solutions\n        as_tibble(ode(\n          y = c(S = S_init, I = I_init, new_inf = 0),\n          times = site_times,\n          func = closed_sir_model_g,\n          parms = in_parms,\n          hmax = 1 / 120\n        )) %>%\n          # Make sure all values are numeric for plotting purposes\n          mutate(across(everything(), as.numeric)) %>%\n          mutate(\n            incidence = ifelse(\n              row_number() == 1,\n              new_inf[1],\n              diff(new_inf, lag = 1)\n            )\n          )\n      }\n    )\n  ) %>%\n  unnest(c(data, predictions))\n```\n:::\n\n\nFinally we can plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataframe to store the positions of the text labels\nniamey_preds_labels <- tibble(\n  site = c(\"Site_1\", \"Site_2\"),\n  x_label = c(6.5, 6.5),\n  x_arrow_just = c(-0.5, -0.5),\n  x_arrow_end = c(7, 7.75),\n  y_label = c(900, 600),\n  y_arrow_just = c(-80, -70),\n  y_arrow_end = c(350, 290),\n  commentary = c(\"**Predicted\", \"**Observed\"),\n  color = c(\"grey20\", niamey_site_colors[\"Site_2\"])\n)\n\nggplot(niamey_predictions_g, aes(x = biweek, group = site)) +\n  # Plot the actual data in color\n  geom_line(aes(y = cases, color = site)) +\n  geom_point(aes(y = cases, color = site), size = 4, alpha = 0.8) +\n  # Plot the best-fit model predictions in black\n  geom_line(aes(y = incidence), color = \"black\") +\n  scale_color_manual(\n    values = niamey_site_colors,\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  # Place each site on it's own subplot and change labels\n  facet_wrap(\n    ~site,\n    ncol = 1,\n    scales = \"free_y\",\n    labeller = as_labeller(niamey_site_labels)\n  ) +\n  labs(x = \"Biweek\", y = \"Number of Case\") +\n  theme(legend.position = \"none\") +\n  ggtext::geom_textbox(\n    data = niamey_preds_labels,\n    aes(\n      label = paste0(\n        \"<span style = \\\"color:\",\n        color,\n        \"\\\">\",\n        commentary,\n        \" Cases**\",\n        \"</span>\"\n      ),\n      x = x_label,\n      y = y_label\n    ),\n    size = 4,\n    fill = NA,\n    box.colour = NA\n  ) +\n  geom_curve(\n    data = niamey_preds_labels,\n    aes(\n      x = x_label + x_arrow_just,\n      xend = x_arrow_end,\n      y = y_label + y_arrow_just,\n      yend = y_arrow_end\n    ),\n    linewidth = 0.75,\n    arrow = arrow(length = unit(0.2, \"cm\")),\n    curvature = list(0.25),\n    color = \"grey20\"\n  )\n```\n\n::: {.cell-output-display}\n![](r-session-03_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n### Exercise 6\n\nWhat happens if one or both of the other unknowns ($X_0$ and $Y_0$) is fixed instead of $\\gamma$?\n\n#### Solutions coming soon!\n\nFirst we modify the `sse_sir_g` function again to fix $X_0$ and $Y_0$ (or both)\n\n\n::: {.cell}\n\n:::\n\n\nNow we can run the optim algorithm and find the best parameters for the SIR model for each of the scenario.\n\nFirst, for S0 fixed:\n\n\n::: {.cell}\n\n:::\n\n\nSecond, for I0 fixed:\n\n\n::: {.cell}\n\n:::\n\n\nThird, for fixing both S0 and I0:\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\nNow let's pass these models through `optim` and fit the models:\n\n\n::: {.cell}\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\n{\"contents\":[{\"name\":\"niamey_data\",\"value\":{\"Biweek\":[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16],\"site\":[\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\",\"Site 1\",\"Site 2\",\"Site 3\"],\"Number of Individuals\":[22,1,0,27,2,0,64,7,0,84,4,2,116,20,0,172,38,4,173,125,3,651,290,20,786,519,49,1041,874,81,842,810,116,903,702,164,745,636,159,211,213,33,83,71,16,11,34,5]}}]}\n</script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}